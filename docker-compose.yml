# docker-compose.yml for ABParts Local Development
version: "3.9"

services:
  # PostgreSQL Database Service
  db:
    image: postgres:15
    container_name: abparts_db
    ports:
      - "5432:5432" # Expose PostgreSQL port to the host
    environment:
      # Use environment variables from a .env file (recommended) or set directly here
      POSTGRES_DB: ${POSTGRES_DB:-abparts_dev}
      POSTGRES_USER: ${POSTGRES_USER:-abparts_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-abparts_pass}
    volumes:
      - db_data:/var/lib/postgresql/data # Persist database data
      - ./init_db:/docker-entrypoint-initdb.d # For initial DB scripts (e.g., creating users, initial data)
    healthcheck:
      # Healthcheck to ensure DB is ready before dependent services start
      test: [ "CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB" ]
      interval: 5s
      timeout: 5s
      retries: 5

  # Redis Service (for Caching and Celery Broker)
  redis:
    image: redis:latest
    container_name: abparts_redis
    ports:
      - "6379:6379" # Expose Redis port to the host (optional for internal communication)
    volumes:
      - redis_data:/data # Persist Redis data (optional, can be ephemeral for dev)
    command: redis-server --appendonly yes # Enable AOF persistence for Redis
    healthcheck:
      # Healthcheck to ensure Redis is ready
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 5s
      timeout: 3s
      retries: 5

  # FastAPI Backend Service
  api:
    build:
      context: ./backend # Path to your backend directory containing Dockerfile
      dockerfile: Dockerfile.backend # Assuming your Dockerfile is named Dockerfile.backend
    container_name: abparts_api
    ports:
      - "8000:8000" # Expose FastAPI port to the host
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-abparts_user}:${POSTGRES_PASSWORD:-abparts_pass}@db:5432/${POSTGRES_DB:-abparts_dev}
      REDIS_URL: redis://redis:6379/0
      # Add any other FastAPI environment variables here (e.g., AUTH0_DOMAIN, KEYCLOAK_URL)
    volumes:
      - ./backend:/app # Mount your backend code for live reloading during development
      - api_static_images:/app/static/images # New: Volume for static images
    depends_on:
      db:
        condition: service_healthy # Ensure DB is healthy before starting API
      redis:
        condition: service_healthy # Ensure Redis is healthy before starting API
    # Command to run FastAPI with Uvicorn in development mode (with auto-reload)
    command: >
      uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload --reload-exclude /app/static/images
  # Celery Worker Service for ML Engine and Async Tasks
  celery_worker:
    build:
      context: ./backend # Use the same backend Dockerfile
      dockerfile: Dockerfile.backend
    container_name: abparts_celery_worker
    environment:
      # Celery needs access to Redis for the broker and DB for tasks that interact with data
      REDIS_URL: redis://redis:6379/0
      DATABASE_URL: postgresql://${POSTGRES_USER:-abparts_user}:${POSTGRES_PASSWORD:-abparts_pass}@db:5432/${POSTGRES_DB:-abparts_dev}
    volumes:
      - ./backend:/app # Mount backend code for the worker
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    # Command to run the Celery worker
    # Adjust `app.celery_worker` based on your actual Celery app instantiation
    command: celery -A app.celery_app worker --loglevel=info

  # PgAdmin for Database Management
  pgadmin:
    image: dpage/pgadmin4
    container_name: abparts_pgadmin
    ports:
      - "8080:80" # Expose PgAdmin UI
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-admin@abparts.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
      PGADMIN_CONFIG_SERVER_MODE: "False"
      # Point pgAdmin to the database service within the Docker network
      # This setting in config_local.py (if used for pre-configured servers) would override this
    volumes:
      - pgadmin_data:/var/lib/pgadmin # Persist pgAdmin configuration and server connections
      - ./pgadmin_config/config_local.py:/pgadmin4/config_local.py # Mount custom config_local.py
    depends_on:
      db:
        condition: service_healthy # Ensure DB is healthy before starting PgAdmin

  # React Web Frontend Development Server
  web:
    build:
      context: ./frontend # Path to your frontend directory
      dockerfile: Dockerfile.frontend # Assuming your Dockerfile is named Dockerfile.frontend
    container_name: abparts_web
    ports:
      - "3000:3000" # React development server port
    volumes:
      - ./frontend:/app # Mount frontend code for live reloading
      - /app/node_modules # Avoid overwriting node_modules inside the container with host's
    environment:
      # Point the React app to the backend API running in Docker
      REACT_APP_API_BASE_URL: http://localhost:8000 # Use localhost when accessing from host browser
      # If your mobile app runs on device, it might need the host IP, e.g., 192.168.1.X:8000
    depends_on:
      api:
        condition: service_started # Web depends on API being started (not necessarily healthy for dev)
    # Command to start the React development server
    command: sh -c "npm install && npm start"

# Docker Volumes for data persistence
volumes:
  db_data: # For PostgreSQL data
  redis_data: # For Redis data
  pgadmin_data: # For PgAdmin configuration
  api_static_images: # New: Declared the volume for API static images
