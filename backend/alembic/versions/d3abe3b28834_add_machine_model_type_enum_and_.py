"""add_machine_model_type_enum_and_enhancements

Revision ID: d3abe3b28834
Revises: schema_extensions_001
Create Date: 2025-07-30 15:53:59.823359

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'd3abe3b28834'
down_revision: Union[str, Sequence[str], None] = 'schema_extensions_001'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # Create the MachineModelType enum first
    machine_model_type_enum = postgresql.ENUM('V3.1B', 'V4.0', name='machinemodeltype')
    machine_model_type_enum.create(op.get_bind())
    
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('part_order_requests',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('order_number', sa.String(length=50), nullable=False),
    sa.Column('customer_organization_id', sa.UUID(), nullable=False),
    sa.Column('supplier_type', sa.Enum('ORASEAS_EE', 'EXTERNAL_SUPPLIER', name='suppliertype'), nullable=False),
    sa.Column('supplier_organization_id', sa.UUID(), nullable=True),
    sa.Column('supplier_name', sa.String(length=255), nullable=True),
    sa.Column('status', sa.Enum('REQUESTED', 'APPROVED', 'ORDERED', 'SHIPPED', 'RECEIVED', 'CANCELLED', name='orderstatus'), nullable=False),
    sa.Column('priority', sa.Enum('LOW', 'MEDIUM', 'HIGH', 'URGENT', name='orderpriority'), nullable=False),
    sa.Column('requested_delivery_date', sa.DateTime(timezone=True), nullable=True),
    sa.Column('expected_delivery_date', sa.DateTime(timezone=True), nullable=True),
    sa.Column('actual_delivery_date', sa.DateTime(timezone=True), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('fulfillment_notes', sa.Text(), nullable=True),
    sa.Column('requested_by_user_id', sa.UUID(), nullable=False),
    sa.Column('approved_by_user_id', sa.UUID(), nullable=True),
    sa.Column('received_by_user_id', sa.UUID(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['approved_by_user_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['customer_organization_id'], ['organizations.id'], ),
    sa.ForeignKeyConstraint(['received_by_user_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['requested_by_user_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['supplier_organization_id'], ['organizations.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_part_order_requests_order_number'), 'part_order_requests', ['order_number'], unique=True)
    op.create_table('part_order_items',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('order_request_id', sa.UUID(), nullable=False),
    sa.Column('part_id', sa.UUID(), nullable=False),
    sa.Column('quantity', sa.DECIMAL(precision=10, scale=3), nullable=False),
    sa.Column('unit_price', sa.DECIMAL(precision=10, scale=2), nullable=True),
    sa.Column('destination_warehouse_id', sa.UUID(), nullable=False),
    sa.Column('received_quantity', sa.DECIMAL(precision=10, scale=3), server_default='0', nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['destination_warehouse_id'], ['warehouses.id'], ),
    sa.ForeignKeyConstraint(['order_request_id'], ['part_order_requests.id'], ),
    sa.ForeignKeyConstraint(['part_id'], ['parts.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('transaction_approvals',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('transaction_id', sa.UUID(), nullable=False),
    sa.Column('approver_id', sa.UUID(), nullable=False),
    sa.Column('status', sa.Enum('PENDING', 'APPROVED', 'REJECTED', name='transactionapprovalstatus'), nullable=False),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['approver_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['transaction_id'], ['transactions.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.drop_index(op.f('idx_inventory_current_stock'), table_name='inventory')
    op.drop_index(op.f('idx_inventory_last_updated'), table_name='inventory')
    op.drop_index(op.f('idx_inventory_part_id'), table_name='inventory')
    op.drop_index(op.f('idx_inventory_warehouse_id'), table_name='inventory')
    op.drop_index(op.f('idx_inventory_warehouse_part'), table_name='inventory')
    op.drop_constraint(op.f('inventory_warehouse_id_part_id_key'), 'inventory', type_='unique')
    op.create_unique_constraint('_warehouse_part_uc', 'inventory', ['warehouse_id', 'part_id'])
    op.drop_index(op.f('ix_machine_hours_machine_date'), table_name='machine_hours')
    op.drop_index(op.f('ix_machine_hours_machine_id'), table_name='machine_hours')
    op.drop_index(op.f('ix_machine_hours_recorded_date'), table_name='machine_hours')
    op.drop_constraint(op.f('machine_hours_machine_id_fkey'), 'machine_hours', type_='foreignkey')
    op.create_foreign_key(None, 'machine_hours', 'machines', ['machine_id'], ['id'])
    op.drop_index(op.f('idx_machine_maintenance_date'), table_name='machine_maintenance')
    op.drop_index(op.f('idx_machine_maintenance_machine_id'), table_name='machine_maintenance')
    op.drop_table_comment(
        'machine_maintenance',
        existing_comment='Records maintenance activities performed on machines',
        schema=None
    )
    op.drop_index(op.f('idx_machine_part_compatibility_machine_id'), table_name='machine_part_compatibility')
    op.drop_index(op.f('idx_machine_part_compatibility_part_id'), table_name='machine_part_compatibility')
    op.drop_table_comment(
        'machine_part_compatibility',
        existing_comment='Records which parts are compatible with which machines',
        schema=None
    )
    op.drop_index(op.f('idx_machine_predictions_date'), table_name='machine_predictions')
    op.drop_index(op.f('idx_machine_predictions_machine_id'), table_name='machine_predictions')
    op.drop_table_comment(
        'machine_predictions',
        existing_comment='Stores predictions made by predictive maintenance models for specific machines',
        schema=None
    )
    # Convert existing model_type values to enum using USING clause
    op.execute("ALTER TABLE machines ALTER COLUMN model_type TYPE machinemodeltype USING model_type::machinemodeltype")
    op.drop_index(op.f('idx_machines_customer'), table_name='machines')
    op.drop_index(op.f('idx_maintenance_part_usage_maintenance_id'), table_name='maintenance_part_usage')
    op.drop_index(op.f('idx_maintenance_part_usage_part_id'), table_name='maintenance_part_usage')
    op.drop_table_comment(
        'maintenance_part_usage',
        existing_comment='Records parts used during maintenance activities',
        schema=None
    )
    op.drop_index(op.f('idx_maintenance_recommendations_machine_id'), table_name='maintenance_recommendations')
    op.drop_index(op.f('idx_maintenance_recommendations_status'), table_name='maintenance_recommendations')
    op.drop_table_comment(
        'maintenance_recommendations',
        existing_comment='Stores maintenance recommendations based on predictive model outputs',
        schema=None
    )
    op.drop_index(op.f('idx_organizations_name'), table_name='organizations')
    op.drop_constraint(op.f('organizations_name_key'), 'organizations', type_='unique')
    op.drop_index(op.f('unique_bossaqua'), table_name='organizations', postgresql_where="(organization_type = 'bossaqua'::organizationtype)")
    op.drop_index(op.f('unique_oraseas_ee'), table_name='organizations', postgresql_where="(organization_type = 'oraseas_ee'::organizationtype)")
    op.create_index(op.f('ix_organizations_name'), 'organizations', ['name'], unique=True)
    op.drop_index(op.f('idx_parts_part_number'), table_name='parts')
    op.drop_index(op.f('ix_parts_manufacturer'), table_name='parts')
    op.drop_index(op.f('ix_parts_part_code'), table_name='parts')
    op.drop_index(op.f('ix_parts_serial_number'), table_name='parts')
    op.drop_constraint(op.f('parts_part_number_key'), 'parts', type_='unique')
    op.create_index(op.f('ix_parts_part_number'), 'parts', ['part_number'], unique=True)
    op.drop_table_comment(
        'predictive_maintenance_models',
        existing_comment='Represents machine learning models for predictive maintenance',
        schema=None
    )
    op.drop_index(op.f('ix_security_events_event_type'), table_name='security_events')
    op.drop_index(op.f('ix_security_events_risk_level'), table_name='security_events')
    op.drop_index(op.f('ix_security_events_timestamp'), table_name='security_events')
    op.drop_index(op.f('ix_security_events_user_id'), table_name='security_events')
    op.drop_index(op.f('idx_supplier_order_items_part_date'), table_name='supplier_order_items')
    op.drop_index(op.f('idx_supplier_order_items_part_id'), table_name='supplier_order_items')
    op.drop_index(op.f('idx_supplier_order_items_unit_price'), table_name='supplier_order_items')
    op.drop_index(op.f('idx_supplier_orders_date'), table_name='supplier_orders')
    op.drop_index(op.f('idx_supplier_orders_order_date'), table_name='supplier_orders')
    op.alter_column('transactions', 'transaction_type',
               existing_type=postgresql.ENUM('creation', 'transfer', 'consumption', 'adjustment', name='transactiontype'),
               type_=sa.String(length=50),
               existing_nullable=False)
    op.drop_index(op.f('idx_transactions_date'), table_name='transactions')
    op.drop_index(op.f('idx_transactions_from_warehouse'), table_name='transactions')
    op.drop_index(op.f('idx_transactions_from_warehouse_date'), table_name='transactions')
    op.drop_index(op.f('idx_transactions_part'), table_name='transactions')
    op.drop_index(op.f('idx_transactions_part_id'), table_name='transactions')
    op.drop_index(op.f('idx_transactions_to_warehouse'), table_name='transactions')
    op.drop_index(op.f('idx_transactions_to_warehouse_date'), table_name='transactions')
    op.drop_index(op.f('idx_transactions_type'), table_name='transactions')
    op.drop_index(op.f('idx_transactions_warehouse'), table_name='transactions')
    op.drop_index(op.f('idx_transactions_warehouse_date'), table_name='transactions')
    op.drop_index(op.f('idx_transactions_warehouse_from'), table_name='transactions')
    op.drop_index(op.f('idx_transactions_warehouse_to'), table_name='transactions')
    op.drop_index(op.f('idx_transactions_warehouse_to_date'), table_name='transactions')
    op.drop_index(op.f('ix_user_mgmt_audit_action'), table_name='user_management_audit_logs')
    op.drop_index(op.f('ix_user_mgmt_audit_timestamp'), table_name='user_management_audit_logs')
    op.drop_index(op.f('ix_user_mgmt_audit_user_id'), table_name='user_management_audit_logs')
    op.drop_index(op.f('ix_user_sessions_expires_at'), table_name='user_sessions')
    op.drop_index(op.f('ix_user_sessions_is_active'), table_name='user_sessions')
    op.drop_index(op.f('ix_user_sessions_user_id'), table_name='user_sessions')
    op.drop_constraint(op.f('user_sessions_session_token_key'), 'user_sessions', type_='unique')
    op.drop_index(op.f('ix_user_sessions_session_token'), table_name='user_sessions')
    op.create_index(op.f('ix_user_sessions_session_token'), 'user_sessions', ['session_token'], unique=True)
    op.drop_index(op.f('idx_users_email'), table_name='users')
    op.drop_index(op.f('idx_users_org_role'), table_name='users')
    op.drop_index(op.f('idx_users_username'), table_name='users')
    op.drop_constraint(op.f('users_email_key'), 'users', type_='unique')
    op.drop_constraint(op.f('users_username_key'), 'users', type_='unique')
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_index(op.f('ix_users_username'), 'users', ['username'], unique=True)
    op.drop_index(op.f('idx_warehouses_is_active'), table_name='warehouses')
    op.drop_index(op.f('idx_warehouses_organization_id'), table_name='warehouses')
    op.drop_constraint(op.f('warehouses_organization_id_name_key'), 'warehouses', type_='unique')
    op.create_unique_constraint('_org_warehouse_name_uc', 'warehouses', ['organization_id', 'name'])
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint('_org_warehouse_name_uc', 'warehouses', type_='unique')
    op.create_unique_constraint(op.f('warehouses_organization_id_name_key'), 'warehouses', ['organization_id', 'name'], postgresql_nulls_not_distinct=False)
    op.create_index(op.f('idx_warehouses_organization_id'), 'warehouses', ['organization_id'], unique=False)
    op.create_index(op.f('idx_warehouses_is_active'), 'warehouses', ['is_active'], unique=False)
    op.drop_index(op.f('ix_users_username'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.create_unique_constraint(op.f('users_username_key'), 'users', ['username'], postgresql_nulls_not_distinct=False)
    op.create_unique_constraint(op.f('users_email_key'), 'users', ['email'], postgresql_nulls_not_distinct=False)
    op.create_index(op.f('idx_users_username'), 'users', ['username'], unique=False)
    op.create_index(op.f('idx_users_org_role'), 'users', ['organization_id', 'role'], unique=False)
    op.create_index(op.f('idx_users_email'), 'users', ['email'], unique=False)
    op.drop_index(op.f('ix_user_sessions_session_token'), table_name='user_sessions')
    op.create_index(op.f('ix_user_sessions_session_token'), 'user_sessions', ['session_token'], unique=False)
    op.create_unique_constraint(op.f('user_sessions_session_token_key'), 'user_sessions', ['session_token'], postgresql_nulls_not_distinct=False)
    op.create_index(op.f('ix_user_sessions_user_id'), 'user_sessions', ['user_id'], unique=False)
    op.create_index(op.f('ix_user_sessions_is_active'), 'user_sessions', ['is_active'], unique=False)
    op.create_index(op.f('ix_user_sessions_expires_at'), 'user_sessions', ['expires_at'], unique=False)
    op.create_index(op.f('ix_user_mgmt_audit_user_id'), 'user_management_audit_logs', ['user_id'], unique=False)
    op.create_index(op.f('ix_user_mgmt_audit_timestamp'), 'user_management_audit_logs', ['timestamp'], unique=False)
    op.create_index(op.f('ix_user_mgmt_audit_action'), 'user_management_audit_logs', ['action'], unique=False)
    op.create_index(op.f('idx_transactions_warehouse_to_date'), 'transactions', ['to_warehouse_id', 'transaction_date'], unique=False)
    op.create_index(op.f('idx_transactions_warehouse_to'), 'transactions', ['to_warehouse_id'], unique=False)
    op.create_index(op.f('idx_transactions_warehouse_from'), 'transactions', ['from_warehouse_id'], unique=False)
    op.create_index(op.f('idx_transactions_warehouse_date'), 'transactions', ['from_warehouse_id', 'transaction_date'], unique=False)
    op.create_index(op.f('idx_transactions_warehouse'), 'transactions', ['from_warehouse_id', 'to_warehouse_id'], unique=False)
    op.create_index(op.f('idx_transactions_type'), 'transactions', ['transaction_type'], unique=False)
    op.create_index(op.f('idx_transactions_to_warehouse_date'), 'transactions', ['to_warehouse_id', 'transaction_date'], unique=False)
    op.create_index(op.f('idx_transactions_to_warehouse'), 'transactions', ['to_warehouse_id'], unique=False)
    op.create_index(op.f('idx_transactions_part_id'), 'transactions', ['part_id'], unique=False)
    op.create_index(op.f('idx_transactions_part'), 'transactions', ['part_id'], unique=False)
    op.create_index(op.f('idx_transactions_from_warehouse_date'), 'transactions', ['from_warehouse_id', 'transaction_date'], unique=False)
    op.create_index(op.f('idx_transactions_from_warehouse'), 'transactions', ['from_warehouse_id'], unique=False)
    op.create_index(op.f('idx_transactions_date'), 'transactions', ['transaction_date'], unique=False)
    op.alter_column('transactions', 'transaction_type',
               existing_type=sa.String(length=50),
               type_=postgresql.ENUM('creation', 'transfer', 'consumption', 'adjustment', name='transactiontype'),
               existing_nullable=False)
    op.create_index(op.f('idx_supplier_orders_order_date'), 'supplier_orders', ['order_date'], unique=False)
    op.create_index(op.f('idx_supplier_orders_date'), 'supplier_orders', ['order_date'], unique=False)
    op.create_index(op.f('idx_supplier_order_items_unit_price'), 'supplier_order_items', ['unit_price'], unique=False)
    op.create_index(op.f('idx_supplier_order_items_part_id'), 'supplier_order_items', ['part_id'], unique=False)
    op.create_index(op.f('idx_supplier_order_items_part_date'), 'supplier_order_items', ['part_id', 'supplier_order_id'], unique=False)
    op.create_index(op.f('ix_security_events_user_id'), 'security_events', ['user_id'], unique=False)
    op.create_index(op.f('ix_security_events_timestamp'), 'security_events', ['timestamp'], unique=False)
    op.create_index(op.f('ix_security_events_risk_level'), 'security_events', ['risk_level'], unique=False)
    op.create_index(op.f('ix_security_events_event_type'), 'security_events', ['event_type'], unique=False)
    op.create_table_comment(
        'predictive_maintenance_models',
        'Represents machine learning models for predictive maintenance',
        existing_comment=None,
        schema=None
    )
    op.drop_index(op.f('ix_parts_part_number'), table_name='parts')
    op.create_unique_constraint(op.f('parts_part_number_key'), 'parts', ['part_number'], postgresql_nulls_not_distinct=False)
    op.create_index(op.f('ix_parts_serial_number'), 'parts', ['serial_number'], unique=False)
    op.create_index(op.f('ix_parts_part_code'), 'parts', ['part_code'], unique=False)
    op.create_index(op.f('ix_parts_manufacturer'), 'parts', ['manufacturer'], unique=False)
    op.create_index(op.f('idx_parts_part_number'), 'parts', ['part_number'], unique=False)
    op.drop_index(op.f('ix_organizations_name'), table_name='organizations')
    op.create_index(op.f('unique_oraseas_ee'), 'organizations', ['organization_type'], unique=True, postgresql_where="(organization_type = 'oraseas_ee'::organizationtype)")
    op.create_index(op.f('unique_bossaqua'), 'organizations', ['organization_type'], unique=True, postgresql_where="(organization_type = 'bossaqua'::organizationtype)")
    op.create_unique_constraint(op.f('organizations_name_key'), 'organizations', ['name'], postgresql_nulls_not_distinct=False)
    op.create_index(op.f('idx_organizations_name'), 'organizations', ['name'], unique=False)
    op.create_table_comment(
        'maintenance_recommendations',
        'Stores maintenance recommendations based on predictive model outputs',
        existing_comment=None,
        schema=None
    )
    op.create_index(op.f('idx_maintenance_recommendations_status'), 'maintenance_recommendations', ['status'], unique=False)
    op.create_index(op.f('idx_maintenance_recommendations_machine_id'), 'maintenance_recommendations', ['machine_id'], unique=False)
    op.create_table_comment(
        'maintenance_part_usage',
        'Records parts used during maintenance activities',
        existing_comment=None,
        schema=None
    )
    op.create_index(op.f('idx_maintenance_part_usage_part_id'), 'maintenance_part_usage', ['part_id'], unique=False)
    op.create_index(op.f('idx_maintenance_part_usage_maintenance_id'), 'maintenance_part_usage', ['maintenance_id'], unique=False)
    op.create_index(op.f('idx_machines_customer'), 'machines', ['customer_organization_id'], unique=False)
    # Convert enum back to VARCHAR
    op.execute("ALTER TABLE machines ALTER COLUMN model_type TYPE VARCHAR(100)")
    op.create_table_comment(
        'machine_predictions',
        'Stores predictions made by predictive maintenance models for specific machines',
        existing_comment=None,
        schema=None
    )
    op.create_index(op.f('idx_machine_predictions_machine_id'), 'machine_predictions', ['machine_id'], unique=False)
    op.create_index(op.f('idx_machine_predictions_date'), 'machine_predictions', ['prediction_date'], unique=False)
    op.create_table_comment(
        'machine_part_compatibility',
        'Records which parts are compatible with which machines',
        existing_comment=None,
        schema=None
    )
    op.create_index(op.f('idx_machine_part_compatibility_part_id'), 'machine_part_compatibility', ['part_id'], unique=False)
    op.create_index(op.f('idx_machine_part_compatibility_machine_id'), 'machine_part_compatibility', ['machine_id'], unique=False)
    op.create_table_comment(
        'machine_maintenance',
        'Records maintenance activities performed on machines',
        existing_comment=None,
        schema=None
    )
    op.create_index(op.f('idx_machine_maintenance_machine_id'), 'machine_maintenance', ['machine_id'], unique=False)
    op.create_index(op.f('idx_machine_maintenance_date'), 'machine_maintenance', ['maintenance_date'], unique=False)
    op.drop_constraint(None, 'machine_hours', type_='foreignkey')
    op.create_foreign_key(op.f('machine_hours_machine_id_fkey'), 'machine_hours', 'machines', ['machine_id'], ['id'], ondelete='CASCADE')
    op.create_index(op.f('ix_machine_hours_recorded_date'), 'machine_hours', ['recorded_date'], unique=False)
    op.create_index(op.f('ix_machine_hours_machine_id'), 'machine_hours', ['machine_id'], unique=False)
    op.create_index(op.f('ix_machine_hours_machine_date'), 'machine_hours', ['machine_id', 'recorded_date'], unique=False)
    op.drop_constraint('_warehouse_part_uc', 'inventory', type_='unique')
    op.create_unique_constraint(op.f('inventory_warehouse_id_part_id_key'), 'inventory', ['warehouse_id', 'part_id'], postgresql_nulls_not_distinct=False)
    op.create_index(op.f('idx_inventory_warehouse_part'), 'inventory', ['warehouse_id', 'part_id'], unique=False)
    op.create_index(op.f('idx_inventory_warehouse_id'), 'inventory', ['warehouse_id'], unique=False)
    op.create_index(op.f('idx_inventory_part_id'), 'inventory', ['part_id'], unique=False)
    op.create_index(op.f('idx_inventory_last_updated'), 'inventory', ['last_updated'], unique=False)
    op.create_index(op.f('idx_inventory_current_stock'), 'inventory', ['current_stock'], unique=False)
    op.drop_table('transaction_approvals')
    op.drop_table('part_order_items')
    op.drop_index(op.f('ix_part_order_requests_order_number'), table_name='part_order_requests')
    op.drop_table('part_order_requests')
    # ### end Alembic commands ###
    
    # Drop the MachineModelType enum
    machine_model_type_enum = postgresql.ENUM('V3.1B', 'V4.0', name='machinemodeltype')
    machine_model_type_enum.drop(op.get_bind())
