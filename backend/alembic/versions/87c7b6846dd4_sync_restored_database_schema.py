"""sync_restored_database_schema

Revision ID: 87c7b6846dd4
Revises: c129d1c5384e
Create Date: 2025-08-03 22:33:08.221725

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '87c7b6846dd4'
down_revision: Union[str, Sequence[str], None] = 'c129d1c5384e'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('idx_inventory_warehouse_part'), table_name='inventory')
    op.drop_constraint(op.f('inventory_warehouse_id_part_id_key'), 'inventory', type_='unique')
    op.create_foreign_key(None, 'invitation_audit_logs', 'users', ['user_id'], ['id'])
    op.create_foreign_key(None, 'machine_hours', 'machines', ['machine_id'], ['id'])
    op.create_foreign_key(None, 'machine_maintenance', 'users', ['performed_by_user_id'], ['id'])
    op.create_foreign_key(None, 'machine_maintenance', 'machines', ['machine_id'], ['id'])
    op.alter_column('machines', 'model_type',
               existing_type=sa.VARCHAR(length=100),
               type_=postgresql.ENUM('V3_1B', 'V4_0', name='machinemodeltype'),
               existing_nullable=False)
    op.alter_column('machines', 'purchase_date',
               existing_type=sa.DATE(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True)
    op.alter_column('machines', 'warranty_expiry_date',
               existing_type=sa.DATE(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True)
    op.alter_column('machines', 'status',
               existing_type=sa.VARCHAR(length=50),
               type_=postgresql.ENUM('active', 'inactive', 'maintenance', 'decommissioned', name='machinestatus'),
               nullable=False,
               existing_server_default=sa.text("'active'::character varying"))
    op.alter_column('machines', 'last_maintenance_date',
               existing_type=sa.DATE(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True)
    op.alter_column('machines', 'next_maintenance_date',
               existing_type=sa.DATE(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True)
    op.drop_index(op.f('idx_machines_customer'), table_name='machines')
    op.drop_column('machines', 'machine_status')
    op.drop_column('machines', 'operator_name')
    op.drop_column('machines', 'manufacturer')
    op.drop_column('machines', 'hours_since_maintenance')
    op.drop_column('machines', 'maintenance_cost')
    op.drop_column('machines', 'next_service_due')
    op.drop_column('machines', 'model')
    op.drop_column('machines', 'machine_condition')
    op.drop_column('machines', 'maintenance_status')
    op.drop_column('machines', 'current_hours')
    op.drop_column('machines', 'maintenance_notes')
    op.drop_column('machines', 'service_interval_hours')
    op.drop_column('machines', 'total_operating_hours')
    op.drop_column('machines', 'operational_status')
    op.drop_column('machines', 'installation_date')
    op.drop_column('machines', 'last_service_date')
    op.drop_column('machines', 'max_operating_hours')
    op.drop_column('machines', 'technician_name')
    op.drop_column('machines', 'year_manufactured')
    op.drop_column('machines', 'maintenance_interval_days')
    op.alter_column('organizations', 'country',
               existing_type=sa.VARCHAR(length=100),
               type_=sa.String(length=3),
               existing_nullable=True)
    op.drop_index(op.f('idx_organizations_name'), table_name='organizations')
    op.drop_constraint(op.f('organizations_name_key'), 'organizations', type_='unique')
    op.drop_index(op.f('unique_bossaqua'), table_name='organizations', postgresql_where="(organization_type = 'bossaqua'::organizationtype)")
    op.drop_index(op.f('unique_oraseas_ee'), table_name='organizations', postgresql_where="(organization_type = 'oraseas_ee'::organizationtype)")
    op.create_foreign_key(None, 'part_order_items', 'warehouses', ['destination_warehouse_id'], ['id'])
    op.add_column('part_usage', sa.Column('quantity', sa.DECIMAL(precision=10, scale=3), server_default='1', nullable=False))
    op.add_column('part_usage', sa.Column('warehouse_id', sa.UUID(), nullable=False))
    op.create_foreign_key(None, 'part_usage', 'warehouses', ['warehouse_id'], ['id'])
    op.drop_column('part_usage', 'quantity_used')
    op.add_column('parts', sa.Column('part_code', sa.String(length=100), nullable=True))
    op.add_column('parts', sa.Column('serial_number', sa.String(length=255), nullable=True))
    op.alter_column('parts', 'name',
               existing_type=sa.VARCHAR(length=255),
               type_=sa.Text(),
               existing_nullable=False)
    op.drop_index(op.f('idx_parts_part_number'), table_name='parts')
    op.drop_constraint(op.f('parts_part_number_key'), 'parts', type_='unique')
    op.drop_column('parts', 'supplier_part_number')
    op.drop_column('parts', 'color')
    op.drop_column('parts', 'dimensions')
    op.drop_column('parts', 'material')
    op.drop_column('parts', 'category')
    op.drop_column('parts', 'weight')
    op.drop_column('parts', 'warranty_period')
    op.create_foreign_key(None, 'security_events', 'users', ['user_id'], ['id'])
    op.alter_column('transactions', 'transaction_type',
               existing_type=postgresql.ENUM('creation', 'transfer', 'consumption', 'adjustment', name='transactiontype'),
               type_=sa.String(length=50),
               existing_nullable=False)
    op.drop_index(op.f('idx_transactions_date'), table_name='transactions')
    op.drop_index(op.f('idx_transactions_part'), table_name='transactions')
    op.drop_index(op.f('idx_transactions_warehouse'), table_name='transactions')
    op.alter_column('users', 'email_verification_expires_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True)
    op.alter_column('users', 'preferred_language',
               existing_type=sa.VARCHAR(length=10),
               type_=sa.String(length=5),
               existing_nullable=True)
    op.alter_column('users', 'preferred_country',
               existing_type=sa.VARCHAR(length=10),
               type_=sa.String(length=3),
               existing_nullable=True)
    op.alter_column('users', 'localization_preferences',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.Text(),
               existing_nullable=True)
    op.drop_index(op.f('idx_users_email'), table_name='users')
    op.drop_index(op.f('idx_users_org_role'), table_name='users')
    op.drop_index(op.f('idx_users_username'), table_name='users')
    op.drop_constraint(op.f('users_email_key'), 'users', type_='unique')
    op.drop_constraint(op.f('users_username_key'), 'users', type_='unique')
    op.drop_constraint(op.f('warehouses_organization_id_name_key'), 'warehouses', type_='unique')
    op.drop_column('warehouses', 'contact_person')
    op.drop_column('warehouses', 'phone')
    op.drop_column('warehouses', 'warehouse_type')
    op.drop_column('warehouses', 'capacity_limit')
    op.drop_column('warehouses', 'email')
    op.drop_column('warehouses', 'address')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('warehouses', sa.Column('address', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('warehouses', sa.Column('email', sa.VARCHAR(length=255), autoincrement=False, nullable=True))
    op.add_column('warehouses', sa.Column('capacity_limit', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('warehouses', sa.Column('warehouse_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True))
    op.add_column('warehouses', sa.Column('phone', sa.VARCHAR(length=50), autoincrement=False, nullable=True))
    op.add_column('warehouses', sa.Column('contact_person', sa.VARCHAR(length=255), autoincrement=False, nullable=True))
    op.create_unique_constraint(op.f('warehouses_organization_id_name_key'), 'warehouses', ['organization_id', 'name'], postgresql_nulls_not_distinct=False)
    op.create_unique_constraint(op.f('users_username_key'), 'users', ['username'], postgresql_nulls_not_distinct=False)
    op.create_unique_constraint(op.f('users_email_key'), 'users', ['email'], postgresql_nulls_not_distinct=False)
    op.create_index(op.f('idx_users_username'), 'users', ['username'], unique=False)
    op.create_index(op.f('idx_users_org_role'), 'users', ['organization_id', 'role'], unique=False)
    op.create_index(op.f('idx_users_email'), 'users', ['email'], unique=False)
    op.alter_column('users', 'localization_preferences',
               existing_type=sa.Text(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True)
    op.alter_column('users', 'preferred_country',
               existing_type=sa.String(length=3),
               type_=sa.VARCHAR(length=10),
               existing_nullable=True)
    op.alter_column('users', 'preferred_language',
               existing_type=sa.String(length=5),
               type_=sa.VARCHAR(length=10),
               existing_nullable=True)
    op.alter_column('users', 'email_verification_expires_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True)
    op.create_index(op.f('idx_transactions_warehouse'), 'transactions', ['from_warehouse_id', 'to_warehouse_id'], unique=False)
    op.create_index(op.f('idx_transactions_part'), 'transactions', ['part_id'], unique=False)
    op.create_index(op.f('idx_transactions_date'), 'transactions', ['transaction_date'], unique=False)
    op.alter_column('transactions', 'transaction_type',
               existing_type=sa.String(length=50),
               type_=postgresql.ENUM('creation', 'transfer', 'consumption', 'adjustment', name='transactiontype'),
               existing_nullable=False)
    op.drop_constraint(None, 'security_events', type_='foreignkey')
    op.add_column('parts', sa.Column('warranty_period', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('parts', sa.Column('weight', sa.NUMERIC(precision=10, scale=3), autoincrement=False, nullable=True))
    op.add_column('parts', sa.Column('category', sa.VARCHAR(length=100), autoincrement=False, nullable=True))
    op.add_column('parts', sa.Column('material', sa.VARCHAR(length=100), autoincrement=False, nullable=True))
    op.add_column('parts', sa.Column('dimensions', sa.VARCHAR(length=255), autoincrement=False, nullable=True))
    op.add_column('parts', sa.Column('color', sa.VARCHAR(length=50), autoincrement=False, nullable=True))
    op.add_column('parts', sa.Column('supplier_part_number', sa.VARCHAR(length=255), autoincrement=False, nullable=True))
    op.create_unique_constraint(op.f('parts_part_number_key'), 'parts', ['part_number'], postgresql_nulls_not_distinct=False)
    op.create_index(op.f('idx_parts_part_number'), 'parts', ['part_number'], unique=False)
    op.alter_column('parts', 'name',
               existing_type=sa.Text(),
               type_=sa.VARCHAR(length=255),
               existing_nullable=False)
    op.drop_column('parts', 'serial_number')
    op.drop_column('parts', 'part_code')
    op.add_column('part_usage', sa.Column('quantity_used', sa.NUMERIC(precision=10, scale=3), server_default=sa.text('1'), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'part_usage', type_='foreignkey')
    op.drop_column('part_usage', 'warehouse_id')
    op.drop_column('part_usage', 'quantity')
    op.drop_constraint(None, 'part_order_items', type_='foreignkey')
    op.create_index(op.f('unique_oraseas_ee'), 'organizations', ['organization_type'], unique=True, postgresql_where="(organization_type = 'oraseas_ee'::organizationtype)")
    op.create_index(op.f('unique_bossaqua'), 'organizations', ['organization_type'], unique=True, postgresql_where="(organization_type = 'bossaqua'::organizationtype)")
    op.create_unique_constraint(op.f('organizations_name_key'), 'organizations', ['name'], postgresql_nulls_not_distinct=False)
    op.create_index(op.f('idx_organizations_name'), 'organizations', ['name'], unique=False)
    op.alter_column('organizations', 'country',
               existing_type=sa.String(length=3),
               type_=sa.VARCHAR(length=100),
               existing_nullable=True)
    op.add_column('machines', sa.Column('maintenance_interval_days', sa.INTEGER(), server_default=sa.text('90'), autoincrement=False, nullable=True))
    op.add_column('machines', sa.Column('year_manufactured', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('machines', sa.Column('technician_name', sa.VARCHAR(length=255), autoincrement=False, nullable=True))
    op.add_column('machines', sa.Column('max_operating_hours', sa.INTEGER(), server_default=sa.text('10000'), autoincrement=False, nullable=True))
    op.add_column('machines', sa.Column('last_service_date', sa.DATE(), autoincrement=False, nullable=True))
    op.add_column('machines', sa.Column('installation_date', sa.DATE(), autoincrement=False, nullable=True))
    op.add_column('machines', sa.Column('operational_status', sa.VARCHAR(length=50), server_default=sa.text("'running'::character varying"), autoincrement=False, nullable=True))
    op.add_column('machines', sa.Column('total_operating_hours', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True))
    op.add_column('machines', sa.Column('service_interval_hours', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('machines', sa.Column('maintenance_notes', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('machines', sa.Column('current_hours', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True))
    op.add_column('machines', sa.Column('maintenance_status', sa.VARCHAR(length=50), server_default=sa.text("'up_to_date'::character varying"), autoincrement=False, nullable=True))
    op.add_column('machines', sa.Column('machine_condition', sa.VARCHAR(length=50), autoincrement=False, nullable=True))
    op.add_column('machines', sa.Column('model', postgresql.ENUM('V3_1B', 'V4_0', name='machinemodeltype'), server_default=sa.text("'V3_1B'::machinemodeltype"), autoincrement=False, nullable=True))
    op.add_column('machines', sa.Column('next_service_due', sa.DATE(), autoincrement=False, nullable=True))
    op.add_column('machines', sa.Column('maintenance_cost', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True))
    op.add_column('machines', sa.Column('hours_since_maintenance', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True))
    op.add_column('machines', sa.Column('manufacturer', sa.VARCHAR(length=255), server_default=sa.text("'BossAqua'::character varying"), autoincrement=False, nullable=True))
    op.add_column('machines', sa.Column('operator_name', sa.VARCHAR(length=255), autoincrement=False, nullable=True))
    op.add_column('machines', sa.Column('machine_status', sa.VARCHAR(length=50), server_default=sa.text("'operational'::character varying"), autoincrement=False, nullable=True))
    op.create_index(op.f('idx_machines_customer'), 'machines', ['customer_organization_id'], unique=False)
    op.alter_column('machines', 'next_maintenance_date',
               existing_type=sa.DateTime(timezone=True),
               type_=sa.DATE(),
               existing_nullable=True)
    op.alter_column('machines', 'last_maintenance_date',
               existing_type=sa.DateTime(timezone=True),
               type_=sa.DATE(),
               existing_nullable=True)
    op.alter_column('machines', 'status',
               existing_type=postgresql.ENUM('active', 'inactive', 'maintenance', 'decommissioned', name='machinestatus'),
               type_=sa.VARCHAR(length=50),
               nullable=True,
               existing_server_default=sa.text("'active'::character varying"))
    op.alter_column('machines', 'warranty_expiry_date',
               existing_type=sa.DateTime(timezone=True),
               type_=sa.DATE(),
               existing_nullable=True)
    op.alter_column('machines', 'purchase_date',
               existing_type=sa.DateTime(timezone=True),
               type_=sa.DATE(),
               existing_nullable=True)
    op.alter_column('machines', 'model_type',
               existing_type=postgresql.ENUM('V3_1B', 'V4_0', name='machinemodeltype'),
               type_=sa.VARCHAR(length=100),
               existing_nullable=False)
    op.drop_constraint(None, 'machine_maintenance', type_='foreignkey')
    op.drop_constraint(None, 'machine_maintenance', type_='foreignkey')
    op.drop_constraint(None, 'machine_hours', type_='foreignkey')
    op.drop_constraint(None, 'invitation_audit_logs', type_='foreignkey')
    op.create_unique_constraint(op.f('inventory_warehouse_id_part_id_key'), 'inventory', ['warehouse_id', 'part_id'], postgresql_nulls_not_distinct=False)
    op.create_index(op.f('idx_inventory_warehouse_part'), 'inventory', ['warehouse_id', 'part_id'], unique=False)
    # ### end Alembic commands ###
